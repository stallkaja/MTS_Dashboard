// Get the mongoose object
import mongoose from 'mongoose';

// Prepare to the database exercises_db in the MongoDB server running locally on port 27017
mongoose.connect(
    'mongodb://localhost:27017/exercsies_db',
    { useNewUrlParser: true }
);

// Connect to to the database
const db = mongoose.connection;

// The open event is called when the database connection successfully opens
db.once('open', () => {
    console.log('Successfully connected to MongoDB using Mongoose!');
});

/**
 * Define the schema
 */
 const exerciseSchema = mongoose.Schema({
    name: { type: String, required: true },
    reps: { type: Number, required: true },
    weight: { type: Number, required: true },
    unit: { type: String, required: true },
    date: { type: String, required: true }
  });

/**
 * Compile the model from the schema. This must be done after defining the schema.
 */
const Exercise = mongoose.model("Exercise", exerciseSchema);

/**
 * Create an exercise
* @param {String} name: required
* @param {Number} reps: required
* @param {Number} weight: required
* @param {String} unit: required
* @param {String} date: required (e.g. 06-24-21)
* @return {JSON} A JSON object with all the properties of the document including the unique ID value generated by MongoDB.
*/
async function createExercise(name, reps, weight, unit, date) {
    const exercise = new Exercise({
      name: name,
      reps: reps,
      weight: weight,
      unit: unit,
      date: date
    });
    return exercise.save();
  }
  

/**
 * Retrive exercises 
* @param {Object} filter: matches documents with the same schema
* @param {Number} projection: which fields from the document to include/exclude
* @param {String} limit: number of documents to retrieve
* @returns a promise which settles to an array of JSON objects corresponding
* the documents matched
*/
async function findExercises(filter, projection, limit) {
    const query = Exercise.find(filter)
      .select(projection)
      .limit(limit);
    return query.exec();
  }


/**
 * Replace exercise
* @param {String} _id: required (the _id returned from a POST request)
* @param {String} name: required
* @param {Number} reps: required
* @param {Number} weight: required
* @param {String} unit: required
* @param {String} date: required (e.g. 06-24-21)
* @return {Number} A promise which settles to the number of documents modified.
* Since the _id's are unique, either 0 or 1.
*/
async function replaceExercise({ _id, name, reps, weight, unit, date }) {
    // console.log(_id, name, reps, weight, unit, date)
    const result = await Exercise.replaceOne( {_id: _id},
      { name: name, reps: reps, weight: weight, unit: unit, date: date });
  
    console.log(result);
    return result.nModified;
  }


/**
 * Delete exercise
* @return {Number} The number of exercises deleted.
*/
async function deleteExercise(_id) {
    const result = await Exercise.deleteOne( {_id: _id} )
    return result.deletedCount;
  }

export { deleteExercise, replaceExercise, findExercises, createExercise};